def getClients(self):
	"""
	Returns a list of client hashes.

	These hashes do not include the fields `type` and `id`.
	They contain the additional field `depotId` with the assigned depot of the client.

	:rtype: [{}, ]
	"""
	import re

	timestampRegex = re.compile(r'^(\d\d\d\d)-(\d\d)-(\d\d) (\d\d):(\d\d):(\d\d)$')

	def convertTimestamp(timestamp):
		if timestamp is None:
			return ''

		match = timestampRegex.search(client.get('created', ''))
		if match:
			return '%s%s%s%s%s%s' % (match.group(1), match.group(2), match.group(3), match.group(4), match.group(5), match.group(6))

		return timestamp

	def _normaliseDict(ddict):
		for (key, value) in ddict.items():
			if value is None:
				ddict[key] = ''

		return ddict

	clientToDepotservers = {
		mapping['clientId']: mapping['depotId']
		for mapping in
		self.configState_getClientToDepotserver()
	}

	results = []
	for client in self.host_getHashes(type='OpsiClient'):
		client['hostId'] = client['id']

		client['created'] = convertTimestamp(client.get('created'))
		client['lastSeen'] = convertTimestamp(client.get('lastSeen'))

		try:
			client['depotId'] = clientToDepotservers[client['id']]
		except KeyError:
			client['depotId'] = ''

		del client['type']
		del client['id']

		results.append(_normaliseDict(client))

	return results


def getClientIDs(self):
	"""
	Returns a list of client IDs.

	:rtype: [str, ]
	"""
	return self.host_getIdents(type="OpsiClient")


def getClientsOnDepot(self, depotIds):
	"""
	Returns a list of client IDs that can be found on the given depots.

	:param depotIds: IDs of depots
	:type depotIds: [str, ]
	:rtype: list
	"""
	depotIds = forceHostIdList(depotIds)
	if not depotIds:
		raise ValueError("No depotIds given")

	return [
		clientToDepotserver['clientId']
		for clientToDepotserver
		in self.configState_getClientToDepotserver(depotIds=depotIds)
	]


def getClientsWithProducts(self, productIds, installationStatus=None):
	"""
	Returns a list of client IDs with the given productIds independent from
	their status.
	This means that this might return clients that had the software in
	the past but not currently.

	If `installationStatus` is set only clients with the given status for the
	products will be returned.

	:param productIds: The products to search for
	:type productIds: [str, ]
	:param installationStatus: a specific status to search
	:type installationStatus: str
	:rtype: [str, ]
	"""
	productIds = forceProductIdList(productIds)
	if not productIds:
		raise ValueError("Missing product ids")

	pocFilter = {
		"productId": productIds,
	}
	if installationStatus is not None:
		pocFilter['installationStatus'] = forceInstallationStatus(installationStatus)

	clientIds = set([poc.clientId for poc in self.productOnClient_getObjects(**pocFilter)])
	return list(clientIds)


def getClientsWithActionRequest(self, actionRequests):
	"""
	Returns a list of client IDs that have the given actionRequests set.
	Each client will only be present once in the list of one of the given action requests match.

	:param actionRequests: The action requests to filter for.
	:type actionRequests: str or [str, ]
	:rtype: [str, ]
	"""
	actionRequests = [
		request for request
		in forceActionRequestList(actionRequests)
		if request
	]
	if not actionRequests:
		raise ValueError("Missing action requests")

	clientIds = set([poc.clientId for poc in self.productOnClient_getObjects(actionRequest=actionRequests)])
	return list(clientIds)
